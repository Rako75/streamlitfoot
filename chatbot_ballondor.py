# -*- coding: utf-8 -*-
"""chatbot_ballondor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZW8P3P-1ICdawztOa2j-dmuNrID-zLT
"""

import streamlit as st
import pandas as pd
from transformers import pipeline

# 1. Chargement des donn√©es
@st.cache_data
def load_data():
    return pd.read_csv('Ballondor2024.csv')  # Remplacez par le nom de votre fichier CSV

# 2. Chargement du mod√®le NLP
@st.cache_resource
def load_model():
    return pipeline("text-generation", model="distilgpt2", max_length=150)

# 3. Analyse des donn√©es pour r√©pondre aux questions
def answer_question(question, data):
    """
    Fonction pour traiter les questions sp√©cifiques pos√©es par l'utilisateur.
    """
    # Convertir la question en minuscule pour faciliter la recherche
    question_lower = question.lower()

    # R√©pondre √† des questions g√©n√©rales
    if "vainqueur ballon d'or" in question_lower:
        return "Le vainqueur du Ballon d'Or 2024 est [√Ä compl√©ter manuellement]."

    if "nomin√©s" in question_lower and "ballon d'or" in question_lower:
        nominees = ", ".join(data['player'].unique())
        return f"Les joueurs nomin√©s pour le Ballon d'Or sont : {nominees}."

    if "club" in question_lower or "√©quipe" in question_lower:
        teams = data['team'].unique()
        return f"Les clubs repr√©sent√©s parmi les nomin√©s sont : {', '.join(teams)}."

    # Statistiques sp√©cifiques aux joueurs
    if "statistiques de" in question_lower:
        player_name = extract_player_name(question, data)
        if player_name:
            return display_player_stats(player_name, data)
        return "D√©sol√©, je n'ai pas trouv√© ce joueur."

    if "meilleur buteur" in question_lower or "plus de buts" in question_lower:
        top_scorer = data.loc[data['Performance-Gls'].idxmax()]
        return f"Le joueur avec le plus de buts est {top_scorer['player']} avec {top_scorer['Performance-Gls']} buts."

    if "passes d√©cisives" in question_lower:
        top_assist = data.loc[data['Performance-Ast'].idxmax()]
        return f"Le joueur avec le plus de passes d√©cisives est {top_assist['player']} avec {top_assist['Performance-Ast']} passes."

    if "plus jeune" in question_lower:
        youngest_player = data.loc[data['age'].idxmin()]
        return f"Le joueur le plus jeune est {youngest_player['player']} avec {youngest_player['age']} ans."

    if "plus √¢g√©" in question_lower:
        oldest_player = data.loc[data['age'].idxmax()]
        return f"Le joueur le plus √¢g√© est {oldest_player['player']} avec {oldest_player['age']} ans."

    # Question non reconnue
    return "Je suis d√©sol√©, je ne comprends pas votre question. Veuillez reformuler."

# 4. Extraire le nom du joueur depuis la question
def extract_player_name(question, data):
    for player in data['player']:
        if player.lower() in question.lower():
            return player
    return None

# 5. Afficher les statistiques d'un joueur
def display_player_stats(player_name, data):
    player_info = data[data['player'].str.contains(player_name, case=False, na=False)]
    if not player_info.empty:
        stats = player_info.iloc[0]
        return (f"**Statistiques de {stats['player']} :**\n"
                f"- √âquipe : {stats['team']}\n"
                f"- Buts : {stats['Performance-Gls']}\n"
                f"- Passes d√©cisives : {stats['Performance-Ast']}\n"
                f"- xG Attendu : {stats['Expected-xG']}\n"
                f"- Minutes jou√©es : {stats['Playing Time-Min']}")
    return "Statistiques non disponibles pour ce joueur."

# 6. Interface Streamlit
st.title("üèÜ Chatbot Ballon d'Or 2024")
st.write("Posez des questions sur les joueurs nomin√©s au Ballon d'Or et d√©couvrez leurs statistiques !")

# Charger les donn√©es et le mod√®le
data = load_data()
model = load_model()

# Entr√©e utilisateur
user_input = st.text_input("Posez votre question ici (ex: Qui a marqu√© le plus de buts ?)")

if user_input:
    st.write("üß† **Analyse de la question...**")
    answer = answer_question(user_input, data)
    st.write(answer)

    # Option pour afficher les vid√©os associ√©es
    player_name = extract_player_name(user_input, data)
    if player_name:
        video_url = data.loc[data['player'].str.contains(player_name, case=False), 'URL'].iloc[0]
        if pd.notna(video_url):
            st.video(video_url)
            st.write(f"üé• Moments forts de {player_name} : [Regarder ici]({video_url})")