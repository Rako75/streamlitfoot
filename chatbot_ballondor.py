# -*- coding: utf-8 -*-
"""chatbot_ballondor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZW8P3P-1ICdawztOa2j-dmuNrID-zLT
"""

import os
from dotenv import load_dotenv

# Charger le fichier .env
load_dotenv("config.env")

# Acc√©der √† la cl√© API
openai_api_key = os.getenv("OPENAI_API_KEY")

# Importations n√©cessaires
import os
import pandas as pd
from dotenv import load_dotenv
import streamlit as st
from transformers import pipeline

# Charger la cl√© API depuis le fichier .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Charger le mod√®le de NLP
@st.cache_resource
def load_nlp_model():
    return pipeline("text-generation", model="EleutherAI/gpt-neo-125M", max_length=200)

nlp_model = load_nlp_model()

# Charger les donn√©es
@st.cache_data
def load_data():
    return pd.read_csv("Ballondor2024.csv")

df = load_data()

# Fonction pour r√©pondre aux questions li√©es au dataset
def query_dataset(question):
    # Analyse de la question pour d√©terminer les r√©ponses
    if "vainqueur" in question.lower():
        return "Le vainqueur du Ballon d'Or 2024 sera r√©v√©l√© prochainement !"
    elif "nomin√©s" in question.lower() and "liste" in question.lower():
        return df["player"].tolist()
    elif "meilleur buteur" in question.lower() or "plus de buts" in question.lower():
        top_scorer = df.sort_values("Performance-Gls", ascending=False).iloc[0]
        return f"Le meilleur buteur est {top_scorer['player']} avec {top_scorer['Performance-Gls']} buts."
    elif "passe d√©cisive" in question.lower() or "plus de passes" in question.lower():
        top_assist = df.sort_values("Performance-Ast", ascending=False).iloc[0]
        return f"Le meilleur passeur est {top_assist['player']} avec {top_assist['Performance-Ast']} passes d√©cisives."
    elif "plus jeune" in question.lower():
        youngest = df.sort_values("age").iloc[0]
        return f"Le plus jeune joueur est {youngest['player']} avec {youngest['age']} ans."
    elif "plus √¢g√©" in question.lower():
        oldest = df.sort_values("age", ascending=False).iloc[0]
        return f"Le joueur le plus √¢g√© est {oldest['player']} avec {oldest['age']} ans."
    elif "statistiques" in question.lower():
        player_name = question.split("de ")[-1].strip()
        player_stats = df[df["player"].str.contains(player_name, case=False, na=False)]
        if not player_stats.empty:
            stats = player_stats.iloc[0]
            return stats.to_dict()
        else:
            return f"Aucun joueur nomm√© {player_name} trouv√©."
    else:
        return "Je ne suis pas s√ªr de comprendre votre question. Essayez d'√™tre plus pr√©cis."

# Fonction pour r√©pondre de mani√®re naturelle avec un LLM
def generate_response(user_input):
    dataset_response = query_dataset(user_input)
    if isinstance(dataset_response, str):
        return dataset_response
    elif isinstance(dataset_response, dict):  # Statistiques sp√©cifiques
        response = f"Voici les statistiques pour {dataset_response['player']} :\n"
        for key, value in dataset_response.items():
            response += f"{key}: {value}\n"
        return response
    else:
        # Sinon, g√©n√©rer une r√©ponse g√©n√©rique avec le mod√®le NLP
        response = nlp_model(user_input)
        return response[0]["generated_text"]

# Interface utilisateur Streamlit
def main():
    st.title("ü§ñ ChatBot Ballon d'Or 2024")
    st.write("Posez-moi des questions sur les nomin√©s du Ballon d'Or 2024 !")

    # Entr√©e utilisateur
    user_input = st.text_input("Votre question :", "")

    if st.button("Poser la question"):
        if user_input:
            with st.spinner("Analyse en cours..."):
                response = generate_response(user_input)
            st.success("R√©ponse :")
            st.write(response)
        else:
            st.warning("Veuillez entrer une question.")

    # Affichage de la vid√©o des joueurs (liens depuis la colonne URL)
    st.write("**Highlights des joueurs**")
    player_name = st.text_input("Entrez le nom d'un joueur pour voir ses highlights :", "")
    if player_name:
        player_row = df[df["player"].str.contains(player_name, case=False, na=False)]
        if not player_row.empty:
            video_url = player_row.iloc[0]["URL"]
            st.video(video_url)
        else:
            st.error("Joueur non trouv√©. Veuillez v√©rifier le nom.")

if __name__ == "__main__":
    main()