# -*- coding: utf-8 -*-
"""chatbot_ballondor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZW8P3P-1ICdawztOa2j-dmuNrID-zLT
"""

#pip install python-dotenv streamlit openai pandas

import os
from dotenv import load_dotenv

# Charger le fichier .env
load_dotenv("config.env")

# Acc√©der √† la cl√© API
openai_api_key = os.getenv("OPENAI_API_KEY")

import streamlit as st
import pandas as pd
import openai

# 1. Configuration de l'API OpenAI
openai.api_key = "YOUR_API_KEY"  # Remplacez par votre cl√© API OpenAI

# 2. Chargement des donn√©es
@st.cache_data
def load_data():
    return pd.read_csv('Ballondor2024.csv')  # Remplacez par le nom de votre fichier CSV

# 3. G√©n√©ration de r√©ponse avec OpenAI GPT
def generate_gpt_response(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # Utiliser GPT-3.5 si GPT-4 n'est pas disponible
            messages=[
                {"role": "system", "content": "Tu es un chatbot expert sur le Ballon d'Or 2024, avec des donn√©es pr√©cises sur les joueurs, leurs performances et statistiques."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=250,
            temperature=0.7
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        return f"Une erreur est survenue : {str(e)}"

# 4. Extraire les statistiques sp√©cifiques des joueurs
def get_player_stats(player_name, data):
    player_data = data[data['player'].str.contains(player_name, case=False, na=False)]
    if not player_data.empty:
        stats = player_data.iloc[0]
        return (f"Voici les statistiques de {stats['player']} :\n"
                f"- **√âquipe** : {stats['team']}\n"
                f"- **Buts marqu√©s** : {stats['Performance-Gls']}\n"
                f"- **Passes d√©cisives** : {stats['Performance-Ast']}\n"
                f"- **xG Attendu** : {stats['Expected-xG']}\n"
                f"- **Minutes jou√©es** : {stats['Playing Time-Min']}")
    return "Je n'ai pas trouv√© les statistiques pour ce joueur."

# 5. Combiner r√©ponse GPT et donn√©es structur√©es
def chatbot_response(question, data):
    # V√©rifier si le joueur est mentionn√© dans la question
    for player in data['player']:
        if player.lower() in question.lower():
            stats = get_player_stats(player, data)
            gpt_prompt = f"R√©ponds naturellement √† la question : '{question}'. Voici les statistiques de {player} : {stats}"
            return generate_gpt_response(gpt_prompt)

    # Si pas de joueur sp√©cifique, poser directement la question au mod√®le GPT
    gpt_prompt = f"R√©ponds naturellement √† la question suivante sur le Ballon d'Or 2024 : '{question}'."
    return generate_gpt_response(gpt_prompt)

# 6. Interface Streamlit
st.title("üèÜ ChatBot Ballon d'Or 2024")
st.write("Discutez naturellement avec moi pour obtenir des informations sur le Ballon d'Or, les joueurs et leurs statistiques !")

# Chargement des donn√©es
data = load_data()

# Entr√©e utilisateur
user_input = st.text_input("üí¨ Posez-moi une question ici (ex: Qui a marqu√© le plus de buts ?)")

if user_input:
    st.write("‚è≥ **Je r√©fl√©chis...**")
    response = chatbot_response(user_input, data)
    st.write(response)

    # Ajouter une vid√©o si un joueur est identifi√©
    for player in data['player']:
        if player.lower() in user_input.lower():
            video_url = data.loc[data['player'].str.contains(player, case=False), 'URL'].iloc[0]
            if pd.notna(video_url):
                st.video(video_url)
                st.write(f"üé• Moments forts de {player} : [Regarder ici]({video_url})")
            break