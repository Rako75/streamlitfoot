# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P1eRKkMWfyyYl0xQP3CKQGEJGbFRr6u3
"""

import streamlit as st
from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
import pandas as pd

# Configuration Streamlit
st.set_page_config(page_title="Ballon d'Or 2024 Chatbot", layout="wide")
st.title("Chatbot Ballon d'Or 2024")
st.write("Posez vos questions pour obtenir des informations détaillées sur les nominés au Ballon d'Or 2024.")

# Charger les données
file_path = '/mnt/data/Ballondor2024.csv'  # Chemin du fichier
data = pd.read_csv(file_path)

# Préparer les données d'entraînement
training_data = []

for _, row in data.iterrows():
    player = row['player']
    team = row['team']
    league = row['league']
    nation = row['nation']
    pos = row['pos']
    goals = row.get('Performance-Gls', 'inconnu')
    assists = row.get('Performance-Ast', 'inconnu')
    age = row.get('age', 'inconnu')
    minutes = row.get('Playing Time-Min', 'inconnu')
    xG = row.get('Expected-xG', 'inconnu')
    passes_progressives = row.get('Progression-PrgP', 'inconnu')
    tackles_won = row.get('Tackles-TklW', 'inconnu')

    training_data.append((f"Dans quelle équipe joue {player} ?", f"{player} joue pour {team}."))
    training_data.append((f"De quelle ligue provient {player} ?", f"{player} évolue dans la ligue {league}."))
    training_data.append((f"Quelle est la nationalité de {player} ?", f"{player} est originaire de {nation}."))
    training_data.append((f"Quel est le poste de {player} ?", f"{player} joue en tant que {pos}."))
    training_data.append((f"Combien de buts a marqué {player} ?", f"{player} a marqué {goals} buts cette saison."))
    training_data.append((f"Combien de passes décisives a fait {player} ?", f"{player} a fait {assists} passes décisives."))
    training_data.append((f"Quel âge a {player} ?", f"{player} a {age} ans."))
    training_data.append((f"Combien de minutes {player} a-t-il joué ?", f"{player} a joué {minutes} minutes."))
    training_data.append((f"Quel est le xG de {player} ?", f"Le xG de {player} est de {xG}."))
    training_data.append((f"Combien de passes progressives a effectué {player} ?", f"{player} a réalisé {passes_progressives} passes progressives."))
    training_data.append((f"Combien de tacles réussis {player} a-t-il réalisés ?", f"{player} a réussi {tackles_won} tacles."))

# Ajouter des questions globales
teams = data['team'].unique()
nations = data['nation'].value_counts()
positions = data['pos'].value_counts()

training_data.append(("Quels joueurs étaient nominés pour le Ballon d'Or 2024 ?",
                      f"Les nominés sont : {', '.join(data['player'])}."))
training_data.append(("Quels sont les clubs représentés parmi les nominés ?",
                      f"Les clubs représentés sont : {', '.join(teams)}."))
training_data.append(("Combien de joueurs par nation ont été nominés ?",
                      f"Voici la répartition : {nations.to_dict()}."))
training_data.append(("Quels postes sont représentés parmi les nominés ?",
                      f"Les postes sont : {positions.to_dict()}."))

# Initialiser le chatbot
chatbot = ChatBot(
    "BallonDorBot",
    storage_adapter="chatterbot.storage.SQLStorageAdapter",
    logic_adapters=["chatterbot.logic.BestMatch"],
    database_uri="sqlite:///database.sqlite3"
)

# Entraîner le chatbot
trainer = ListTrainer(chatbot)
for question, answer in training_data:
    trainer.train([question, answer])

# Interface utilisateur avec Streamlit
st.subheader("Posez votre question au chatbot")

user_input = st.text_input("Votre question :")
if user_input:
    with st.spinner("Le chatbot réfléchit..."):
        response = chatbot.get_response(user_input)
    st.success("Réponse :")
    st.write(response)

# Afficher les données en tableau
if st.checkbox("Afficher les données des nominés", value=False):
    st.dataframe(data)